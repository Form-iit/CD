name: "Ansible: setup docker on machines"

on:
    workflow_dispatch: 
    workflow_run:
        workflows:
            - Infrastructure Deployment
        types:
            - completed

jobs:
    process-terraform-outputs:
        if: github.event.workflow_run.conclusion == 'success'
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                ref: ${{ github.event.workflow_run.head_sha }}
            
            - name: Download build artifact
              uses: dawidd6/action-download-artifact@v6
              with:
                name: terraform-outputs
                github_token: ${{ secrets.GITHUB_TOKEN }}
                run_id: ${{ github.event.workflow_run.id }}
            
            - name: Parse Terraform Outputs
              id: parse-outputs
              run: |
                API_GW_IP=$(jq -r '.[] | select(.name == "apiGw_instance_details") | .value.public_ip' terraform-outputs.json)
                EUREKA_SERVER_IP=$(jq -r '.[] | select(.name == "eureka_instance_details") | .value.private_ip' terraform-outputs.json)

                # First save IPs to outputs (before masking)
                echo "API_GW_IP=$API_GW_IP" >> $GITHUB_OUTPUT
                echo "EUREKA_SERVER_IP=$EUREKA_SERVER_IP" >> $GITHUB_OUTPUT
                
                # Then mask the values for logs
                echo "::add-mask::$API_GW_IP"
                echo "::add-mask::$EUREKA_SERVER_IP"
              
            - name: Verify Output
              run: |
                echo "API_GW_IP from output: ${{ steps.parse-outputs.outputs.API_GW_IP }}"
        outputs:
            apiGwIP: ${{ steps.parse-outputs.outputs.API_GW_IP }}
            eurekaIP: ${{ steps.parse-outputs.outputs.EUREKA_SERVER_IP }} 
        
    setup-ansible-inventory:
      needs: process-terraform-outputs
      runs-on: ubuntu-latest
      steps:
          - name: Checkout repository
            uses: actions/checkout@v4
            with:
              ref: ${{ github.event.workflow_run.head_sha }}

          - name: Fill inventory template
            id: set-ip
            run: | 
              # Mask the IPs as soon as we receive them
              echo "::add-mask::${{ needs.process-terraform-outputs.outputs.apiGwIP }}"
              echo "::add-mask::${{ needs.process-terraform-outputs.outputs.eurekaIP }}"

              mkdir -p ansible

              INVENTORY_TEMPLATE=$(cat src/ansible/inventory.tpl)

              API_GW_IP=${{ needs.process-terraform-outputs.outputs.apiGwIP }}
              INVENTORY=$(echo "$INVENTORY_TEMPLATE" | sed "s/API-GW_IP_PLACEHOLDER/$API_GW_IP/g" | sed "s/EUREKA_SERVER_IP_PLACEHOLDER/${{ needs.process-terraform-outputs.outputs.eurekaIP }}/g" | sed "s/API_GW_USER/${{ secrets.API_GW_HOST_USERNAME }}/g" | sed "s/EUREKA_USER/${{ secrets.EUREKA_HOST_USERNAME }}/g") 
              
              echo "$INVENTORY" > ansible/inventory

              echo "$INVENTORY"
              
              echo "API_GW_IP=$API_GW_IP" >> "$GITHUB_OUTPUT"
              
          - name: Upload inventory artifact
            uses: actions/upload-artifact@v4
            with:
              name: ansible-inventory
              path: ansible/inventory

          - name: Verify Output
            run: |
              echo "API_GW_IP from output: ${{ steps.set-ip.outputs.API_GW_IP }}"
      outputs:
        apiGwIP: ${{ steps.set-ip.outputs.API_GW_IP }}

    setup-ssh:
        needs: setup-ansible-inventory
        runs-on: ubuntu-latest
        steps:
            - name: Debug Outputs
              run: |
                # Mask the IP at the start of this job
                echo "::add-mask::${{ needs.setup-ansible-inventory.outputs.apiGwIP }}"
                echo "API Gateway IP: ${{ needs.setup-ansible-inventory.outputs.apiGwIP }}"
                echo "Full job context:"
                echo '${{ toJson(needs) }}'

            - name: Create the ssh directory
              run: |
                mkdir -p ~/.ssh
                chmod 700 ~/.ssh

            - name: Extract ssh private key
              run: |
                echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 -d > ~/.ssh/id_rsa
                chmod 600 ~/.ssh/id_rsa

            - name: Handle the key by the ssh-agent
              run: |
                eval "$(ssh-agent -s)"
                ssh-add ~/.ssh/id_rsa

            - name: Add target host to known-hosts
              env:
                API_GW_IP: ${{ needs.setup-ansible-inventory.outputs.apiGwIP }}
              run: | 
                ssh-keyscan -H $API_GW_IP  >> ~/.ssh/known_hosts 
                chmod 600 ~/.ssh/known_hosts
    
    setup-ansible:
        needs: setup-ansible-inventory
        runs-on: ubuntu-latest
        steps:
            - name: Set up Python
              uses: actions/setup-python@v4
            
            - name: Set up Ansible
              run: |
                pip install ansible
                ansible-galaxy collection install community.docker
                ansible-galaxy collection install community.general
    
    run-docker-playbook:
        needs: 
            - setup-ssh
            - setup-ansible
            - setup-ansible-inventory
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                ref: ${{ github.event.workflow_run.head_sha }}

            - name: Download inventory artifact
              uses: actions/download-artifact@v4
              with:
                name: ansible-inventory
                path: ansible
                
            - name: Run Ansible Playbook
              run: ansible-playbook -i ansible/inventory src/ansible/playbooks/setup_docker.yml --private-key=~/.ssh/id_rsa
              env:
                ANSIBLE_HOST_KEY_CHECKING: true