name: "Ansible: setup docker on machines"

on:
    workflow_run:
        workflows:
            - Infrastructure Deployment
        types:
            - completed

jobs:
    process-terraform-outputs:
      if: github.event.workflow_run.conclusion == 'success'
      runs-on: ubuntu-latest

      steps:
          # Checkout to the repo
          - name: Checkout repository
            uses: actions/checkout@v4
            with:
              ref: ${{ github.event.workflow_run.head_branch }}
          
          - name: Download build artifact
            uses: dawidd6/action-download-artifact@v6
            with:
              name: terraform-outputs
              github_token: ${{ secrets.GITHUB_TOKEN }} #This is needed because we're downloading an artifact from a different workflow.The GITHUB_TOKEN is automatically provided by GitHub Actions. Without this token, the action wouldn't have permission to access artifacts from other workflows
              run_id: ${{ github.event.workflow_run.id }} #contains the ID of the workflow run that triggered this  workflow.
          
          # Parse the json outputs
          - name: Parse Terraform Outputs
            id: parse-outputs
            run: |
              # Use jq to extract IPs from within the parsed outputs
              API_GW_IP=$(jq -r '.[] | select(.name == "apiGw_instance_details") | .value.public_ip' terraform-outputs.json)
              EUREKA_SERVER_IP=$(jq -r '.[] | select(.name == "eureka_instance_details") | .value.private_ip' terraform-outputs.json)
              
              # Save IPs to environment variables
              echo "API_GW_IP=$API_GW_IP" >> $GITHUB_OUTPUT
              echo "EUREKA_SERVER_IP=$EUREKA_SERVER_IP" >> $GITHUB_OUTPUT
      outputs:
          apiGwIP: ${{ steps.parse-outputs.outputs.API_GW_IP }}
          eurekaIP: ${{ steps.parse-outputs.outputs.EUREKA_SERVER_IP }} 
        
    setup-ansible-inventory:
      needs: process-terraform-outputs
      runs-on: ubuntu-latest
      steps:
          - name: Checkout repository
            uses: actions/checkout@v4
            with:
              ref: ${{ github.event.workflow_run.head_branch }}

          - name: Fill inventory template
            id: set-ip
            run: | 
              # Create the ansible directory if it doesn't exist
              mkdir -p ansible

              # read the inventory template then store it within INVENTORY_TEMPLATE variable
              INVENTORY_TEMPLATE=$(cat src/ansible/inventory.tpl)

              # Get the IP from the previous job
              API_GW_IP=${{ needs.process-terraform-outputs.outputs.apiGwIP }}
              
              # Replace placeholders within the inventory
              INVENTORY=$(echo "$INVENTORY_TEMPLATE" | sed "s/API-GW_IP_PLACEHOLDER/$API_GW_IP/g" | sed "s/EUREKA_SERVER_IP_PLACEHOLDER/${{ needs.process-terraform-outputs.outputs.eurekaIP }}/g" | sed "s/API_GW_USER/${{ secrets.API_GW_HOST_USERNAME }}/g" | sed "s/EUREKA_USER/${{ secrets.EUREKA_HOST_USERNAME }}/g") 
              
              # Write the final inventory file
              echo "$INVENTORY" > ansible/inventory
              
              # Explicitly output the IP using the full syntax
              echo "API_GW_IP=$API_GW_IP" >> "$GITHUB_OUTPUT"
              
          # Upload the inventory as an artifact
          - name: Upload inventory artifact
            uses: actions/upload-artifact@v4
            with:
              name: ansible-inventory
              path: ansible/inventory

      outputs:
        apiGwIP: ${{ steps.set-ip.outputs.API_GW_IP }}
    
    setup-ansible:
      needs: setup-ansible-inventory
      runs-on: ubuntu-latest
      steps:
          - name: Set up Python
            uses: actions/setup-python@v4
        
          - name: Set up Ansible
            run: |
              pip install ansible
              ansible-galaxy collection install community.docker
              ansible-galaxy collection install community.general
    
    run-docker-playbook:
      needs: 
          - setup-ansible
          - setup-ansible-inventory
      runs-on: ubuntu-latest
      steps:
          - name: Checkout repository
            uses: actions/checkout@v4
            with:
              ref: ${{ github.event.workflow_run.head_branch }}

          - name: Download ansible-inventory artifact
            uses: actions/download-artifact@v4
            with:
              name: ansible-inventory

          - name: Setup SSH
            id: setup-ssh
            uses: ./.github/actions/setup-ssh
            with:
              target_ips: "${{ needs.setup-ansible-inventory.outputs.apiGwIP }}"
              ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}

          - name: Inject SSH key file into the inventory
            env: 
              SSH_PRIVATE_KEY_FILE_PATH: ${{ steps.setup-ssh.outputs.ssh_key_path }}
            run: |
              # read the inventory template then store it within INVENTORY_TEMPLATE variable
              INVENTORY_TEMPLATE=$(cat inventory)

              # Replace placeholders within the inventory
              INVENTORY=$(echo "$INVENTORY_TEMPLATE" | sed "s|SSH_PRIVATE_KEY_PATH|$SSH_PRIVATE_KEY_FILE_PATH|g")
              
              # Make the ansible directory if it doesn't exist
              mkdir -p ansible 

              # Write the final inventory file
              echo "$INVENTORY" > ansible/inventory
              
          - name: Upload new inventory artifact
            uses: actions/upload-artifact@v4
            with:
              name: ansible-inventory
              path: ansible/inventory

          - name: Run Ansible Playbook
            run: ansible-playbook -i ansible/inventory src/ansible/playbooks/setup_docker.yml
            env:
              ANSIBLE_HOST_KEY_CHECKING: true