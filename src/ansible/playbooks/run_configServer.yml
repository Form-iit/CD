- name: Run Eureka server's docker compose
  hosts: config_server

  tasks:

    - name: Check if config-server container exists and is running
      community.docker.docker_container_info:
        name: config-server
      register: config_server_container

    - name: Proceed with the deployment if config-server container is not running
      when: not config_server_container.exists or config_server_container.container.State.Status != 'running'      
      block:
        - name: Ensure config directory exists
          ansible.builtin.file:
            path: "~/config-server"
            state: directory
            mode: '0755'

        - name: Copy .env file to target machine
          ansible.builtin.copy:
            src: "{{ playbook_dir }}/.env"
            dest: "~/config-server"
            mode: '0644'

        - name: Pull Docker image from Docker Hub
          community.docker.docker_image:
            name: "diamobachar/config-server:latest"
            source: pull

        - name: Fetch Docker Compose file from GitHub
          ansible.builtin.get_url:
            url: "https://raw.githubusercontent.com/Form-iit/Config-service/main/docker-compose.yml"
            dest: "~/config-server/docker-compose.yml"
            mode: '0644'

        - name: Modify Docker Compose file to use pulled image
          ansible.builtin.lineinfile:
            path: "~/config-server/docker-compose.yml"
            regexp: '^(\s*)build:'
            line: '\1image: diamobachar/config-server:latest'
            backrefs: true
            state: present

        - name: Remove build context section if exists
          ansible.builtin.lineinfile:
            path: "~/config-server/docker-compose.yml"
            regexp: '^\s*context:'
            state: absent

        - name: Remove dockerfile section if exists
          ansible.builtin.lineinfile:
            path: "~/config-server/docker-compose.yml"
            regexp: '^\s*dockerfile:'
            state: absent

        - name: Start Docker Compose
          community.docker.docker_compose_v2:
            project_src: "~/config-server"
            env_files: ["~/config-server/.env"]
            pull: always
            state: present

    - name: Load Config server credentials
      block:
        - name: Read Config server username
          ansible.builtin.shell:
            cmd: set -o pipefail && grep "^APP_SECURITY_USER_NAME=" ~/config-server/.env | cut -d'=' -f2
            executable: /bin/bash
          register: username_line
          changed_when: false

        - name: Read Config server password
          ansible.builtin.shell:
            cmd: set -o pipefail && grep "^APP_SECURITY_USER_PASSWORD=" ~/config-server/.env | cut -d'=' -f2
            executable: /bin/bash
          register: password_line
          changed_when: false

        - name: Set credentials
          ansible.builtin.set_fact:
            config_server_credentials:
              username: "{{ username_line.stdout }}"
              password: "{{ password_line.stdout }}"

    - name: Wait for config server to be ready
      ansible.builtin.uri:
        url: "http://localhost:8888/actuator/health"
        status_code: 200
        user: "{{ config_server_credentials.username }}"
        password: "{{ config_server_credentials.password }}"
        force_basic_auth: true
      register: health_check
      retries: 10
      delay: 5
      until:
        - health_check.status == 200
        - (health_check.json.status | default('')) == 'UP'
      failed_when:
        - health_check.status != 200
        - (health_check.json.status | default('')) != 'UP'